---
name: Release

on:
  push:
    tags:
      - v4.*
  workflow_dispatch: {}

jobs:
  release-archive:
    name: Create Release Archive
    runs-on: 'ubuntu-latest'
    steps:
      - name: Setup
        run: |
          tag=`basename ${{ github.ref }}`
          echo "PREFIX=clair-${tag}/" >> $GITHUB_ENV
          echo "TAG=${tag}" >> $GITHUB_ENV
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Create Release Archive
        run: |
          go mod vendor
          git archive --prefix "${PREFIX}" -o clair.tar "${GITHUB_REF}"
          tar -rf clair.tar --transform "s,^,${PREFIX}," vendor
          gzip clair.tar
      - name: ChangeLog
        shell: bash
        run: |
          if [ "${{ github.event_name }}" = workflow_dispatch ]; then
            echo "workflow trigger, skipping"
            touch changelog
            exit 0
          fi
          curl -o /tmp/git-chglog.tar.gz -fsSL\
            https://github.com/git-chglog/git-chglog/releases/download/v0.14.0/git-chglog_0.14.0_linux_amd64.tar.gz
          tar xvf /tmp/git-chglog.tar.gz --directory /tmp
          chmod u+x /tmp/git-chglog
          echo "creating change log for tag: $TAG"
          /tmp/git-chglog "${TAG}" > changelog
      - name: Upload Release Archive
        uses: actions/upload-artifact@v2
        with:
          name: release
          path: |
            clair.tar.gz
            changelog
          if-no-files-found: error

  release-binaries:
    name: Create Release Binaries
    runs-on: 'ubuntu-latest'
    container: quay.io/projectquay/golang:1.16
    needs: release-archive
    strategy:
      matrix:
        goarch: ['arm64', 'amd64', '386']
        goos: ['linux', 'windows', 'darwin']
        exclude:
          - goos: darwin
            goarch: '386'
          - goos: darwin
            goarch: arm64
          - goos: windows
            goarch: arm64
    env:
      GOOS: ${{matrix.goos}}
      GOARCH: ${{matrix.goarch}}
    steps:
      - name: Fetch Artifacts
        uses: actions/download-artifact@v2
        id: download
        with:
          name: release
      - name: Unpack and Build
        run: |
          tar -xz -f ${{steps.download.outputs.download-path}}/clair.tar.gz --strip-components=1
          go build -o "clairctl-${{matrix.goos}}-${{matrix.goarch}}" ./cmd/clairctl
      - name: Upload
        uses: actions/upload-artifact@v2
        with:
          name: release
          path: clairctl-${{matrix.goos}}-${{matrix.goarch}}
          if-no-files-found: error
      - name: Create Artifact on Failure
        uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: workspace-${{matrix.goos}}-${{matrix.goarch}}
          path: ${{ github.workspace }}

  release:
    name: Release
    runs-on: 'ubuntu-latest'
    if: github.event_name == 'push'
    needs: [release-archive, release-binaries]
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Setup
        run: |
          tag=`basename ${{ github.ref }}`
          echo "VERSION=${tag}" >> $GITHUB_ENV
      - name: Fetch Artifacts
        uses: actions/download-artifact@v2
        id: download
        with:
          name: release
      - name: Create Release
        uses: actions/create-release@latest
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ env.VERSION }} Release
          body_path: ${{steps.download.outputs.download-path}}/changelog
          prerelease: ${{ contains(env.VERSION, 'alpha') || contains(env.VERSION, 'beta') || contains(env.VERSION, 'rc') }}
      - name: Publish Release Archive
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{steps.download.outputs.download-path}}/clair.tar.gz
          asset_name: clair-${{ env.VERSION }}.tar.gz
          asset_content_type: application/gzip

  publish-binaries:
    name: Publish Binaries
    runs-on: 'ubuntu-latest'
    needs: [release-archive, release]
    strategy:
      matrix:
        goarch: ['arm64', 'amd64', '386']
        goos: ['linux', 'windows', 'darwin']
        exclude:
          - goos: darwin
            goarch: '386'
          - goos: darwin
            goarch: arm64
          - goos: windows
            goarch: arm64
    steps:
      - name: Fetch Archive
        uses: actions/download-artifact@v2
        id: download
        with:
          name: release
      - name: Publish clairctl-${{matrix.goos}}-${{matrix.goarch}}
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.release.outputs.upload_url }}
          asset_path: ${{steps.download.outputs.download-path}}/clairctl-${{matrix.goos}}-${{matrix.goarch}}
          asset_name: clairctl-${{matrix.goos}}-${{matrix.goarch}}
          asset_content_type: application/octet-stream

  publish-container:
    name: Publish Container
    runs-on: 'ubuntu-latest'
    needs: [release-archive, release]
    steps:
      - name: Setup
        run: |
          tag=`basename ${{ github.ref }}`
          echo "CLAIR_VERSION=${tag}" >> $GITHUB_ENV
          echo "TAG=quay.io/projectquay/clair:${tag#v}" >> $GITHUB_ENV
          echo "QUAY_USER=projectquay+clair_github" >> $GITHUB_ENV
          echo "::add-mask::${{ secrets.QUAY_TOKEN }}"
      - name: Fetch Artifacts
        uses: actions/download-artifact@v2
        id: download
        with:
          name: release
      - name: Build Release Container
        run: |
          d=$(mktemp -d)
          trap 'rm -rf "$d"' EXIT
          tar -xz -f ${{steps.download.outputs.download-path}}/clair.tar.gz --strip-components=1 -C "$d"
          docker build --build-arg CLAIR_VERSION --tag "${TAG}" "$d"
      - name: Publish Release Container
        run: |
          docker login -u "${QUAY_USER}" -p '${{ secrets.QUAY_TOKEN }}' quay.io
          docker push "${TAG}"

  deploy-documentation:
    name: Deploy Documentation
    runs-on: ubuntu-latest
    needs: [release]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup
        uses: peaceiris/actions-mdbook@v1
        with:
          mdbook-version: 'latest'
      - name: Build
        run: mdbook build --dest-dir "./book/${GITHUB_REF#refs/tags/}"
      - name: Deploy
        uses: peaceiris/actions-gh-pages@v3
        with:
          user_name: 'github-actions[bot]'
          user_email: 'github-actions[bot]@users.noreply.github.com'
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./book
          keep_files: true
