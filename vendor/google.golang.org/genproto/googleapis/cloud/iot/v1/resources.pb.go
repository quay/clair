// Code generated by protoc-gen-go. DO NOT EDIT.
// source: google/cloud/iot/v1/resources.proto

package iot

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import google_protobuf1 "github.com/golang/protobuf/ptypes/timestamp"
import google_rpc "google.golang.org/genproto/googleapis/rpc/status"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Indicates whether an MQTT connection is enabled or disabled. See the field
// description for details.
type MqttState int32

const (
	// No MQTT state specified. If not specified, MQTT will be enabled by default.
	MqttState_MQTT_STATE_UNSPECIFIED MqttState = 0
	// Enables a MQTT connection.
	MqttState_MQTT_ENABLED MqttState = 1
	// Disables a MQTT connection.
	MqttState_MQTT_DISABLED MqttState = 2
)

var MqttState_name = map[int32]string{
	0: "MQTT_STATE_UNSPECIFIED",
	1: "MQTT_ENABLED",
	2: "MQTT_DISABLED",
}
var MqttState_value = map[string]int32{
	"MQTT_STATE_UNSPECIFIED": 0,
	"MQTT_ENABLED":           1,
	"MQTT_DISABLED":          2,
}

func (x MqttState) String() string {
	return proto.EnumName(MqttState_name, int32(x))
}
func (MqttState) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

// Indicates whether DeviceService (HTTP) is enabled or disabled for the
// registry. See the field description for details.
type HttpState int32

const (
	// No HTTP state specified. If not specified, DeviceService will be
	// enabled by default.
	HttpState_HTTP_STATE_UNSPECIFIED HttpState = 0
	// Enables DeviceService (HTTP) service for the registry.
	HttpState_HTTP_ENABLED HttpState = 1
	// Disables DeviceService (HTTP) service for the registry.
	HttpState_HTTP_DISABLED HttpState = 2
)

var HttpState_name = map[int32]string{
	0: "HTTP_STATE_UNSPECIFIED",
	1: "HTTP_ENABLED",
	2: "HTTP_DISABLED",
}
var HttpState_value = map[string]int32{
	"HTTP_STATE_UNSPECIFIED": 0,
	"HTTP_ENABLED":           1,
	"HTTP_DISABLED":          2,
}

func (x HttpState) String() string {
	return proto.EnumName(HttpState_name, int32(x))
}
func (HttpState) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

// The supported formats for the public key.
type PublicKeyCertificateFormat int32

const (
	// The format has not been specified. This is an invalid default value and
	// must not be used.
	PublicKeyCertificateFormat_UNSPECIFIED_PUBLIC_KEY_CERTIFICATE_FORMAT PublicKeyCertificateFormat = 0
	// An X.509v3 certificate ([RFC5280](https://www.ietf.org/rfc/rfc5280.txt)),
	// encoded in base64, and wrapped by `-----BEGIN CERTIFICATE-----` and
	// `-----END CERTIFICATE-----`.
	PublicKeyCertificateFormat_X509_CERTIFICATE_PEM PublicKeyCertificateFormat = 1
)

var PublicKeyCertificateFormat_name = map[int32]string{
	0: "UNSPECIFIED_PUBLIC_KEY_CERTIFICATE_FORMAT",
	1: "X509_CERTIFICATE_PEM",
}
var PublicKeyCertificateFormat_value = map[string]int32{
	"UNSPECIFIED_PUBLIC_KEY_CERTIFICATE_FORMAT": 0,
	"X509_CERTIFICATE_PEM":                      1,
}

func (x PublicKeyCertificateFormat) String() string {
	return proto.EnumName(PublicKeyCertificateFormat_name, int32(x))
}
func (PublicKeyCertificateFormat) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

// The supported formats for the public key.
type PublicKeyFormat int32

const (
	// The format has not been specified. This is an invalid default value and
	// must not be used.
	PublicKeyFormat_UNSPECIFIED_PUBLIC_KEY_FORMAT PublicKeyFormat = 0
	// An RSA public key encoded in base64, and wrapped by
	// `-----BEGIN PUBLIC KEY-----` and `-----END PUBLIC KEY-----`. This can be
	// used to verify `RS256` signatures in JWT tokens ([RFC7518](
	// https://www.ietf.org/rfc/rfc7518.txt)).
	PublicKeyFormat_RSA_PEM PublicKeyFormat = 3
	// As RSA_PEM, but wrapped in an X.509v3 certificate ([RFC5280](
	// https://www.ietf.org/rfc/rfc5280.txt)), encoded in base64, and wrapped by
	// `-----BEGIN CERTIFICATE-----` and `-----END CERTIFICATE-----`.
	PublicKeyFormat_RSA_X509_PEM PublicKeyFormat = 1
	// Public key for the ECDSA algorithm using P-256 and SHA-256, encoded in
	// base64, and wrapped by `-----BEGIN PUBLIC KEY-----` and `-----END
	// PUBLIC KEY-----`. This can be used to verify JWT tokens with the `ES256`
	// algorithm ([RFC7518](https://www.ietf.org/rfc/rfc7518.txt)). This curve is
	// defined in [OpenSSL](https://www.openssl.org/) as the `prime256v1` curve.
	PublicKeyFormat_ES256_PEM PublicKeyFormat = 2
	// As ES256_PEM, but wrapped in an X.509v3 certificate ([RFC5280](
	// https://www.ietf.org/rfc/rfc5280.txt)), encoded in base64, and wrapped by
	// `-----BEGIN CERTIFICATE-----` and `-----END CERTIFICATE-----`.
	PublicKeyFormat_ES256_X509_PEM PublicKeyFormat = 4
)

var PublicKeyFormat_name = map[int32]string{
	0: "UNSPECIFIED_PUBLIC_KEY_FORMAT",
	3: "RSA_PEM",
	1: "RSA_X509_PEM",
	2: "ES256_PEM",
	4: "ES256_X509_PEM",
}
var PublicKeyFormat_value = map[string]int32{
	"UNSPECIFIED_PUBLIC_KEY_FORMAT": 0,
	"RSA_PEM":                       3,
	"RSA_X509_PEM":                  1,
	"ES256_PEM":                     2,
	"ES256_X509_PEM":                4,
}

func (x PublicKeyFormat) String() string {
	return proto.EnumName(PublicKeyFormat_name, int32(x))
}
func (PublicKeyFormat) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

// The device resource.
type Device struct {
	// The user-defined device identifier. The device ID must be unique
	// within a device registry.
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// The resource path name. For example,
	// `projects/p1/locations/us-central1/registries/registry0/devices/dev0` or
	// `projects/p1/locations/us-central1/registries/registry0/devices/{num_id}`.
	// When `name` is populated as a response from the service, it always ends
	// in the device numeric ID.
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// [Output only] A server-defined unique numeric ID for the device. This is a
	// more compact way to identify devices, and it is globally unique.
	NumId uint64 `protobuf:"varint,3,opt,name=num_id,json=numId" json:"num_id,omitempty"`
	// The credentials used to authenticate this device. To allow credential
	// rotation without interruption, multiple device credentials can be bound to
	// this device. No more than 3 credentials can be bound to a single device at
	// a time. When new credentials are added to a device, they are verified
	// against the registry credentials. For details, see the description of the
	// `DeviceRegistry.credentials` field.
	Credentials []*DeviceCredential `protobuf:"bytes,12,rep,name=credentials" json:"credentials,omitempty"`
	// [Output only] The last time a heartbeat was received. Timestamps are
	// periodically collected and written to storage; they may be stale by a few
	// minutes. This field is only for devices connecting through MQTT.
	LastHeartbeatTime *google_protobuf1.Timestamp `protobuf:"bytes,7,opt,name=last_heartbeat_time,json=lastHeartbeatTime" json:"last_heartbeat_time,omitempty"`
	// [Output only] The last time a telemetry event was received. Timestamps are
	// periodically collected and written to storage; they may be stale by a few
	// minutes.
	LastEventTime *google_protobuf1.Timestamp `protobuf:"bytes,8,opt,name=last_event_time,json=lastEventTime" json:"last_event_time,omitempty"`
	// [Output only] The last time a state event was received. Timestamps are
	// periodically collected and written to storage; they may be stale by a few
	// minutes.
	LastStateTime *google_protobuf1.Timestamp `protobuf:"bytes,20,opt,name=last_state_time,json=lastStateTime" json:"last_state_time,omitempty"`
	// [Output only] The last time a cloud-to-device config version acknowledgment
	// was received from the device. This field is only for configurations
	// sent through MQTT.
	LastConfigAckTime *google_protobuf1.Timestamp `protobuf:"bytes,14,opt,name=last_config_ack_time,json=lastConfigAckTime" json:"last_config_ack_time,omitempty"`
	// [Output only] The last time a cloud-to-device config version was sent to
	// the device.
	LastConfigSendTime *google_protobuf1.Timestamp `protobuf:"bytes,18,opt,name=last_config_send_time,json=lastConfigSendTime" json:"last_config_send_time,omitempty"`
	// If a device is blocked, connections or requests from this device will fail.
	// Can be used to temporarily prevent the device from connecting if, for
	// example, the sensor is generating bad data and needs maintenance.
	Blocked bool `protobuf:"varint,19,opt,name=blocked" json:"blocked,omitempty"`
	// [Output only] The time the most recent error occurred, such as a failure to
	// publish to Cloud Pub/Sub. This field is the timestamp of
	// 'last_error_status'.
	LastErrorTime *google_protobuf1.Timestamp `protobuf:"bytes,10,opt,name=last_error_time,json=lastErrorTime" json:"last_error_time,omitempty"`
	// [Output only] The error message of the most recent error, such as a failure
	// to publish to Cloud Pub/Sub. 'last_error_time' is the timestamp of this
	// field. If no errors have occurred, this field has an empty message
	// and the status code 0 == OK. Otherwise, this field is expected to have a
	// status code other than OK.
	LastErrorStatus *google_rpc.Status `protobuf:"bytes,11,opt,name=last_error_status,json=lastErrorStatus" json:"last_error_status,omitempty"`
	// The most recent device configuration, which is eventually sent from
	// Cloud IoT Core to the device. If not present on creation, the
	// configuration will be initialized with an empty payload and version value
	// of `1`. To update this field after creation, use the
	// `DeviceManager.ModifyCloudToDeviceConfig` method.
	Config *DeviceConfig `protobuf:"bytes,13,opt,name=config" json:"config,omitempty"`
	// [Output only] The state most recently received from the device. If no state
	// has been reported, this field is not present.
	State *DeviceState `protobuf:"bytes,16,opt,name=state" json:"state,omitempty"`
	// The metadata key-value pairs assigned to the device. This metadata is not
	// interpreted or indexed by Cloud IoT Core. It can be used to add contextual
	// information for the device.
	//
	// Keys must conform to the regular expression [a-zA-Z0-9-_]+ and be less than
	// 128 bytes in length.
	//
	// Values are free-form strings. Each value must be less than or equal to 32
	// KB in size.
	//
	// The total size of all keys and values must be less than 256 KB, and the
	// maximum number of key-value pairs is 500.
	Metadata map[string]string `protobuf:"bytes,17,rep,name=metadata" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Device) Reset()                    { *m = Device{} }
func (m *Device) String() string            { return proto.CompactTextString(m) }
func (*Device) ProtoMessage()               {}
func (*Device) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *Device) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Device) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Device) GetNumId() uint64 {
	if m != nil {
		return m.NumId
	}
	return 0
}

func (m *Device) GetCredentials() []*DeviceCredential {
	if m != nil {
		return m.Credentials
	}
	return nil
}

func (m *Device) GetLastHeartbeatTime() *google_protobuf1.Timestamp {
	if m != nil {
		return m.LastHeartbeatTime
	}
	return nil
}

func (m *Device) GetLastEventTime() *google_protobuf1.Timestamp {
	if m != nil {
		return m.LastEventTime
	}
	return nil
}

func (m *Device) GetLastStateTime() *google_protobuf1.Timestamp {
	if m != nil {
		return m.LastStateTime
	}
	return nil
}

func (m *Device) GetLastConfigAckTime() *google_protobuf1.Timestamp {
	if m != nil {
		return m.LastConfigAckTime
	}
	return nil
}

func (m *Device) GetLastConfigSendTime() *google_protobuf1.Timestamp {
	if m != nil {
		return m.LastConfigSendTime
	}
	return nil
}

func (m *Device) GetBlocked() bool {
	if m != nil {
		return m.Blocked
	}
	return false
}

func (m *Device) GetLastErrorTime() *google_protobuf1.Timestamp {
	if m != nil {
		return m.LastErrorTime
	}
	return nil
}

func (m *Device) GetLastErrorStatus() *google_rpc.Status {
	if m != nil {
		return m.LastErrorStatus
	}
	return nil
}

func (m *Device) GetConfig() *DeviceConfig {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *Device) GetState() *DeviceState {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *Device) GetMetadata() map[string]string {
	if m != nil {
		return m.Metadata
	}
	return nil
}

// A container for a group of devices.
type DeviceRegistry struct {
	// The identifier of this device registry. For example, `myRegistry`.
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// The resource path name. For example,
	// `projects/example-project/locations/us-central1/registries/my-registry`.
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// The configuration for notification of telemetry events received from the
	// device. All telemetry events that were successfully published by the
	// device and acknowledged by Cloud IoT Core are guaranteed to be
	// delivered to Cloud Pub/Sub. Only the first configuration is used. If you
	// try to publish a device telemetry event using MQTT without specifying a
	// Cloud Pub/Sub topic for the device's registry, the connection closes
	// automatically. If you try to do so using an HTTP connection, an error
	// is returned.
	EventNotificationConfigs []*EventNotificationConfig `protobuf:"bytes,10,rep,name=event_notification_configs,json=eventNotificationConfigs" json:"event_notification_configs,omitempty"`
	// The configuration for notification of new states received from the device.
	// State updates are guaranteed to be stored in the state history, but
	// notifications to Cloud Pub/Sub are not guaranteed. For example, if
	// permissions are misconfigured or the specified topic doesn't exist, no
	// notification will be published but the state will still be stored in Cloud
	// IoT Core.
	StateNotificationConfig *StateNotificationConfig `protobuf:"bytes,7,opt,name=state_notification_config,json=stateNotificationConfig" json:"state_notification_config,omitempty"`
	// The MQTT configuration for this device registry.
	MqttConfig *MqttConfig `protobuf:"bytes,4,opt,name=mqtt_config,json=mqttConfig" json:"mqtt_config,omitempty"`
	// The DeviceService (HTTP) configuration for this device registry.
	HttpConfig *HttpConfig `protobuf:"bytes,9,opt,name=http_config,json=httpConfig" json:"http_config,omitempty"`
	// The credentials used to verify the device credentials. No more than 10
	// credentials can be bound to a single registry at a time. The verification
	// process occurs at the time of device creation or update. If this field is
	// empty, no verification is performed. Otherwise, the credentials of a newly
	// created device or added credentials of an updated device should be signed
	// with one of these registry credentials.
	//
	// Note, however, that existing devices will never be affected by
	// modifications to this list of credentials: after a device has been
	// successfully created in a registry, it should be able to connect even if
	// its registry credentials are revoked, deleted, or modified.
	Credentials []*RegistryCredential `protobuf:"bytes,8,rep,name=credentials" json:"credentials,omitempty"`
}

func (m *DeviceRegistry) Reset()                    { *m = DeviceRegistry{} }
func (m *DeviceRegistry) String() string            { return proto.CompactTextString(m) }
func (*DeviceRegistry) ProtoMessage()               {}
func (*DeviceRegistry) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *DeviceRegistry) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *DeviceRegistry) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DeviceRegistry) GetEventNotificationConfigs() []*EventNotificationConfig {
	if m != nil {
		return m.EventNotificationConfigs
	}
	return nil
}

func (m *DeviceRegistry) GetStateNotificationConfig() *StateNotificationConfig {
	if m != nil {
		return m.StateNotificationConfig
	}
	return nil
}

func (m *DeviceRegistry) GetMqttConfig() *MqttConfig {
	if m != nil {
		return m.MqttConfig
	}
	return nil
}

func (m *DeviceRegistry) GetHttpConfig() *HttpConfig {
	if m != nil {
		return m.HttpConfig
	}
	return nil
}

func (m *DeviceRegistry) GetCredentials() []*RegistryCredential {
	if m != nil {
		return m.Credentials
	}
	return nil
}

// The configuration of MQTT for a device registry.
type MqttConfig struct {
	// If enabled, allows connections using the MQTT protocol. Otherwise, MQTT
	// connections to this registry will fail.
	MqttEnabledState MqttState `protobuf:"varint,1,opt,name=mqtt_enabled_state,json=mqttEnabledState,enum=google.cloud.iot.v1.MqttState" json:"mqtt_enabled_state,omitempty"`
}

func (m *MqttConfig) Reset()                    { *m = MqttConfig{} }
func (m *MqttConfig) String() string            { return proto.CompactTextString(m) }
func (*MqttConfig) ProtoMessage()               {}
func (*MqttConfig) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *MqttConfig) GetMqttEnabledState() MqttState {
	if m != nil {
		return m.MqttEnabledState
	}
	return MqttState_MQTT_STATE_UNSPECIFIED
}

// The configuration of the HTTP bridge for a device registry.
type HttpConfig struct {
	// If enabled, allows devices to use DeviceService via the HTTP protocol.
	// Otherwise, any requests to DeviceService will fail for this registry.
	HttpEnabledState HttpState `protobuf:"varint,1,opt,name=http_enabled_state,json=httpEnabledState,enum=google.cloud.iot.v1.HttpState" json:"http_enabled_state,omitempty"`
}

func (m *HttpConfig) Reset()                    { *m = HttpConfig{} }
func (m *HttpConfig) String() string            { return proto.CompactTextString(m) }
func (*HttpConfig) ProtoMessage()               {}
func (*HttpConfig) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *HttpConfig) GetHttpEnabledState() HttpState {
	if m != nil {
		return m.HttpEnabledState
	}
	return HttpState_HTTP_STATE_UNSPECIFIED
}

// The configuration to forward telemetry events.
type EventNotificationConfig struct {
	// A Cloud Pub/Sub topic name. For example,
	// `projects/myProject/topics/deviceEvents`.
	PubsubTopicName string `protobuf:"bytes,1,opt,name=pubsub_topic_name,json=pubsubTopicName" json:"pubsub_topic_name,omitempty"`
}

func (m *EventNotificationConfig) Reset()                    { *m = EventNotificationConfig{} }
func (m *EventNotificationConfig) String() string            { return proto.CompactTextString(m) }
func (*EventNotificationConfig) ProtoMessage()               {}
func (*EventNotificationConfig) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

func (m *EventNotificationConfig) GetPubsubTopicName() string {
	if m != nil {
		return m.PubsubTopicName
	}
	return ""
}

// The configuration for notification of new states received from the device.
type StateNotificationConfig struct {
	// A Cloud Pub/Sub topic name. For example,
	// `projects/myProject/topics/deviceEvents`.
	PubsubTopicName string `protobuf:"bytes,1,opt,name=pubsub_topic_name,json=pubsubTopicName" json:"pubsub_topic_name,omitempty"`
}

func (m *StateNotificationConfig) Reset()                    { *m = StateNotificationConfig{} }
func (m *StateNotificationConfig) String() string            { return proto.CompactTextString(m) }
func (*StateNotificationConfig) ProtoMessage()               {}
func (*StateNotificationConfig) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{5} }

func (m *StateNotificationConfig) GetPubsubTopicName() string {
	if m != nil {
		return m.PubsubTopicName
	}
	return ""
}

// A server-stored registry credential used to validate device credentials.
type RegistryCredential struct {
	// The credential data. Reserved for expansion in the future.
	//
	// Types that are valid to be assigned to Credential:
	//	*RegistryCredential_PublicKeyCertificate
	Credential isRegistryCredential_Credential `protobuf_oneof:"credential"`
}

func (m *RegistryCredential) Reset()                    { *m = RegistryCredential{} }
func (m *RegistryCredential) String() string            { return proto.CompactTextString(m) }
func (*RegistryCredential) ProtoMessage()               {}
func (*RegistryCredential) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{6} }

type isRegistryCredential_Credential interface {
	isRegistryCredential_Credential()
}

type RegistryCredential_PublicKeyCertificate struct {
	PublicKeyCertificate *PublicKeyCertificate `protobuf:"bytes,1,opt,name=public_key_certificate,json=publicKeyCertificate,oneof"`
}

func (*RegistryCredential_PublicKeyCertificate) isRegistryCredential_Credential() {}

func (m *RegistryCredential) GetCredential() isRegistryCredential_Credential {
	if m != nil {
		return m.Credential
	}
	return nil
}

func (m *RegistryCredential) GetPublicKeyCertificate() *PublicKeyCertificate {
	if x, ok := m.GetCredential().(*RegistryCredential_PublicKeyCertificate); ok {
		return x.PublicKeyCertificate
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*RegistryCredential) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _RegistryCredential_OneofMarshaler, _RegistryCredential_OneofUnmarshaler, _RegistryCredential_OneofSizer, []interface{}{
		(*RegistryCredential_PublicKeyCertificate)(nil),
	}
}

func _RegistryCredential_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*RegistryCredential)
	// credential
	switch x := m.Credential.(type) {
	case *RegistryCredential_PublicKeyCertificate:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PublicKeyCertificate); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("RegistryCredential.Credential has unexpected type %T", x)
	}
	return nil
}

func _RegistryCredential_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*RegistryCredential)
	switch tag {
	case 1: // credential.public_key_certificate
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PublicKeyCertificate)
		err := b.DecodeMessage(msg)
		m.Credential = &RegistryCredential_PublicKeyCertificate{msg}
		return true, err
	default:
		return false, nil
	}
}

func _RegistryCredential_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*RegistryCredential)
	// credential
	switch x := m.Credential.(type) {
	case *RegistryCredential_PublicKeyCertificate:
		s := proto.Size(x.PublicKeyCertificate)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Details of an X.509 certificate. For informational purposes only.
type X509CertificateDetails struct {
	// The entity that signed the certificate.
	Issuer string `protobuf:"bytes,1,opt,name=issuer" json:"issuer,omitempty"`
	// The entity the certificate and public key belong to.
	Subject string `protobuf:"bytes,2,opt,name=subject" json:"subject,omitempty"`
	// The time the certificate becomes valid.
	StartTime *google_protobuf1.Timestamp `protobuf:"bytes,3,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	// The time the certificate becomes invalid.
	ExpiryTime *google_protobuf1.Timestamp `protobuf:"bytes,4,opt,name=expiry_time,json=expiryTime" json:"expiry_time,omitempty"`
	// The algorithm used to sign the certificate.
	SignatureAlgorithm string `protobuf:"bytes,5,opt,name=signature_algorithm,json=signatureAlgorithm" json:"signature_algorithm,omitempty"`
	// The type of public key in the certificate.
	PublicKeyType string `protobuf:"bytes,6,opt,name=public_key_type,json=publicKeyType" json:"public_key_type,omitempty"`
}

func (m *X509CertificateDetails) Reset()                    { *m = X509CertificateDetails{} }
func (m *X509CertificateDetails) String() string            { return proto.CompactTextString(m) }
func (*X509CertificateDetails) ProtoMessage()               {}
func (*X509CertificateDetails) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{7} }

func (m *X509CertificateDetails) GetIssuer() string {
	if m != nil {
		return m.Issuer
	}
	return ""
}

func (m *X509CertificateDetails) GetSubject() string {
	if m != nil {
		return m.Subject
	}
	return ""
}

func (m *X509CertificateDetails) GetStartTime() *google_protobuf1.Timestamp {
	if m != nil {
		return m.StartTime
	}
	return nil
}

func (m *X509CertificateDetails) GetExpiryTime() *google_protobuf1.Timestamp {
	if m != nil {
		return m.ExpiryTime
	}
	return nil
}

func (m *X509CertificateDetails) GetSignatureAlgorithm() string {
	if m != nil {
		return m.SignatureAlgorithm
	}
	return ""
}

func (m *X509CertificateDetails) GetPublicKeyType() string {
	if m != nil {
		return m.PublicKeyType
	}
	return ""
}

// A public key certificate format and data.
type PublicKeyCertificate struct {
	// The certificate format.
	Format PublicKeyCertificateFormat `protobuf:"varint,1,opt,name=format,enum=google.cloud.iot.v1.PublicKeyCertificateFormat" json:"format,omitempty"`
	// The certificate data.
	Certificate string `protobuf:"bytes,2,opt,name=certificate" json:"certificate,omitempty"`
	// [Output only] The certificate details. Used only for X.509 certificates.
	X509Details *X509CertificateDetails `protobuf:"bytes,3,opt,name=x509_details,json=x509Details" json:"x509_details,omitempty"`
}

func (m *PublicKeyCertificate) Reset()                    { *m = PublicKeyCertificate{} }
func (m *PublicKeyCertificate) String() string            { return proto.CompactTextString(m) }
func (*PublicKeyCertificate) ProtoMessage()               {}
func (*PublicKeyCertificate) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{8} }

func (m *PublicKeyCertificate) GetFormat() PublicKeyCertificateFormat {
	if m != nil {
		return m.Format
	}
	return PublicKeyCertificateFormat_UNSPECIFIED_PUBLIC_KEY_CERTIFICATE_FORMAT
}

func (m *PublicKeyCertificate) GetCertificate() string {
	if m != nil {
		return m.Certificate
	}
	return ""
}

func (m *PublicKeyCertificate) GetX509Details() *X509CertificateDetails {
	if m != nil {
		return m.X509Details
	}
	return nil
}

// A server-stored device credential used for authentication.
type DeviceCredential struct {
	// The credential data. Reserved for expansion in the future.
	//
	// Types that are valid to be assigned to Credential:
	//	*DeviceCredential_PublicKey
	Credential isDeviceCredential_Credential `protobuf_oneof:"credential"`
	// [Optional] The time at which this credential becomes invalid. This
	// credential will be ignored for new client authentication requests after
	// this timestamp; however, it will not be automatically deleted.
	ExpirationTime *google_protobuf1.Timestamp `protobuf:"bytes,6,opt,name=expiration_time,json=expirationTime" json:"expiration_time,omitempty"`
}

func (m *DeviceCredential) Reset()                    { *m = DeviceCredential{} }
func (m *DeviceCredential) String() string            { return proto.CompactTextString(m) }
func (*DeviceCredential) ProtoMessage()               {}
func (*DeviceCredential) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{9} }

type isDeviceCredential_Credential interface {
	isDeviceCredential_Credential()
}

type DeviceCredential_PublicKey struct {
	PublicKey *PublicKeyCredential `protobuf:"bytes,2,opt,name=public_key,json=publicKey,oneof"`
}

func (*DeviceCredential_PublicKey) isDeviceCredential_Credential() {}

func (m *DeviceCredential) GetCredential() isDeviceCredential_Credential {
	if m != nil {
		return m.Credential
	}
	return nil
}

func (m *DeviceCredential) GetPublicKey() *PublicKeyCredential {
	if x, ok := m.GetCredential().(*DeviceCredential_PublicKey); ok {
		return x.PublicKey
	}
	return nil
}

func (m *DeviceCredential) GetExpirationTime() *google_protobuf1.Timestamp {
	if m != nil {
		return m.ExpirationTime
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*DeviceCredential) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _DeviceCredential_OneofMarshaler, _DeviceCredential_OneofUnmarshaler, _DeviceCredential_OneofSizer, []interface{}{
		(*DeviceCredential_PublicKey)(nil),
	}
}

func _DeviceCredential_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*DeviceCredential)
	// credential
	switch x := m.Credential.(type) {
	case *DeviceCredential_PublicKey:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PublicKey); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("DeviceCredential.Credential has unexpected type %T", x)
	}
	return nil
}

func _DeviceCredential_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*DeviceCredential)
	switch tag {
	case 2: // credential.public_key
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PublicKeyCredential)
		err := b.DecodeMessage(msg)
		m.Credential = &DeviceCredential_PublicKey{msg}
		return true, err
	default:
		return false, nil
	}
}

func _DeviceCredential_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*DeviceCredential)
	// credential
	switch x := m.Credential.(type) {
	case *DeviceCredential_PublicKey:
		s := proto.Size(x.PublicKey)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// A public key format and data.
type PublicKeyCredential struct {
	// The format of the key.
	Format PublicKeyFormat `protobuf:"varint,1,opt,name=format,enum=google.cloud.iot.v1.PublicKeyFormat" json:"format,omitempty"`
	// The key data.
	Key string `protobuf:"bytes,2,opt,name=key" json:"key,omitempty"`
}

func (m *PublicKeyCredential) Reset()                    { *m = PublicKeyCredential{} }
func (m *PublicKeyCredential) String() string            { return proto.CompactTextString(m) }
func (*PublicKeyCredential) ProtoMessage()               {}
func (*PublicKeyCredential) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{10} }

func (m *PublicKeyCredential) GetFormat() PublicKeyFormat {
	if m != nil {
		return m.Format
	}
	return PublicKeyFormat_UNSPECIFIED_PUBLIC_KEY_FORMAT
}

func (m *PublicKeyCredential) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

// The device configuration. Eventually delivered to devices.
type DeviceConfig struct {
	// [Output only] The version of this update. The version number is assigned by
	// the server, and is always greater than 0 after device creation. The
	// version must be 0 on the `CreateDevice` request if a `config` is
	// specified; the response of `CreateDevice` will always have a value of 1.
	Version int64 `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	// [Output only] The time at which this configuration version was updated in
	// Cloud IoT Core. This timestamp is set by the server.
	CloudUpdateTime *google_protobuf1.Timestamp `protobuf:"bytes,2,opt,name=cloud_update_time,json=cloudUpdateTime" json:"cloud_update_time,omitempty"`
	// [Output only] The time at which Cloud IoT Core received the
	// acknowledgment from the device, indicating that the device has received
	// this configuration version. If this field is not present, the device has
	// not yet acknowledged that it received this version. Note that when
	// the config was sent to the device, many config versions may have been
	// available in Cloud IoT Core while the device was disconnected, and on
	// connection, only the latest version is sent to the device. Some
	// versions may never be sent to the device, and therefore are never
	// acknowledged. This timestamp is set by Cloud IoT Core.
	DeviceAckTime *google_protobuf1.Timestamp `protobuf:"bytes,3,opt,name=device_ack_time,json=deviceAckTime" json:"device_ack_time,omitempty"`
	// The device configuration data.
	BinaryData []byte `protobuf:"bytes,4,opt,name=binary_data,json=binaryData,proto3" json:"binary_data,omitempty"`
}

func (m *DeviceConfig) Reset()                    { *m = DeviceConfig{} }
func (m *DeviceConfig) String() string            { return proto.CompactTextString(m) }
func (*DeviceConfig) ProtoMessage()               {}
func (*DeviceConfig) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{11} }

func (m *DeviceConfig) GetVersion() int64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *DeviceConfig) GetCloudUpdateTime() *google_protobuf1.Timestamp {
	if m != nil {
		return m.CloudUpdateTime
	}
	return nil
}

func (m *DeviceConfig) GetDeviceAckTime() *google_protobuf1.Timestamp {
	if m != nil {
		return m.DeviceAckTime
	}
	return nil
}

func (m *DeviceConfig) GetBinaryData() []byte {
	if m != nil {
		return m.BinaryData
	}
	return nil
}

// The device state, as reported by the device.
type DeviceState struct {
	// [Output only] The time at which this state version was updated in Cloud
	// IoT Core.
	UpdateTime *google_protobuf1.Timestamp `protobuf:"bytes,1,opt,name=update_time,json=updateTime" json:"update_time,omitempty"`
	// The device state data.
	BinaryData []byte `protobuf:"bytes,2,opt,name=binary_data,json=binaryData,proto3" json:"binary_data,omitempty"`
}

func (m *DeviceState) Reset()                    { *m = DeviceState{} }
func (m *DeviceState) String() string            { return proto.CompactTextString(m) }
func (*DeviceState) ProtoMessage()               {}
func (*DeviceState) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{12} }

func (m *DeviceState) GetUpdateTime() *google_protobuf1.Timestamp {
	if m != nil {
		return m.UpdateTime
	}
	return nil
}

func (m *DeviceState) GetBinaryData() []byte {
	if m != nil {
		return m.BinaryData
	}
	return nil
}

func init() {
	proto.RegisterType((*Device)(nil), "google.cloud.iot.v1.Device")
	proto.RegisterType((*DeviceRegistry)(nil), "google.cloud.iot.v1.DeviceRegistry")
	proto.RegisterType((*MqttConfig)(nil), "google.cloud.iot.v1.MqttConfig")
	proto.RegisterType((*HttpConfig)(nil), "google.cloud.iot.v1.HttpConfig")
	proto.RegisterType((*EventNotificationConfig)(nil), "google.cloud.iot.v1.EventNotificationConfig")
	proto.RegisterType((*StateNotificationConfig)(nil), "google.cloud.iot.v1.StateNotificationConfig")
	proto.RegisterType((*RegistryCredential)(nil), "google.cloud.iot.v1.RegistryCredential")
	proto.RegisterType((*X509CertificateDetails)(nil), "google.cloud.iot.v1.X509CertificateDetails")
	proto.RegisterType((*PublicKeyCertificate)(nil), "google.cloud.iot.v1.PublicKeyCertificate")
	proto.RegisterType((*DeviceCredential)(nil), "google.cloud.iot.v1.DeviceCredential")
	proto.RegisterType((*PublicKeyCredential)(nil), "google.cloud.iot.v1.PublicKeyCredential")
	proto.RegisterType((*DeviceConfig)(nil), "google.cloud.iot.v1.DeviceConfig")
	proto.RegisterType((*DeviceState)(nil), "google.cloud.iot.v1.DeviceState")
	proto.RegisterEnum("google.cloud.iot.v1.MqttState", MqttState_name, MqttState_value)
	proto.RegisterEnum("google.cloud.iot.v1.HttpState", HttpState_name, HttpState_value)
	proto.RegisterEnum("google.cloud.iot.v1.PublicKeyCertificateFormat", PublicKeyCertificateFormat_name, PublicKeyCertificateFormat_value)
	proto.RegisterEnum("google.cloud.iot.v1.PublicKeyFormat", PublicKeyFormat_name, PublicKeyFormat_value)
}

func init() { proto.RegisterFile("google/cloud/iot/v1/resources.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 1320 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x97, 0xdd, 0x72, 0xdb, 0x44,
	0x14, 0xc7, 0x23, 0x27, 0x71, 0x92, 0xe3, 0xf8, 0x23, 0x9b, 0x34, 0x11, 0x1e, 0xa0, 0xae, 0xf9,
	0x4a, 0x0b, 0xd8, 0x6d, 0x98, 0x76, 0x08, 0x65, 0x18, 0x12, 0x47, 0x69, 0x4c, 0x93, 0x60, 0x64,
	0x77, 0x06, 0x7a, 0xa3, 0x59, 0x4b, 0x1b, 0x47, 0x8d, 0x2d, 0xa9, 0xd2, 0xca, 0x53, 0x3f, 0x00,
	0x0f, 0xc0, 0x35, 0x2f, 0xc1, 0xab, 0x70, 0xc1, 0x05, 0x6f, 0xc2, 0x25, 0xb3, 0x67, 0x25, 0xf9,
	0x03, 0x39, 0x0e, 0x77, 0xde, 0xdd, 0xf3, 0xff, 0x1d, 0x9d, 0xaf, 0x95, 0x0c, 0x1f, 0xf5, 0x5c,
	0xb7, 0xd7, 0x67, 0x75, 0xb3, 0xef, 0x86, 0x56, 0xdd, 0x76, 0x79, 0x7d, 0xf8, 0xa4, 0xee, 0xb3,
	0xc0, 0x0d, 0x7d, 0x93, 0x05, 0x35, 0xcf, 0x77, 0xb9, 0x4b, 0xb6, 0xa5, 0x51, 0x0d, 0x8d, 0x6a,
	0xb6, 0xcb, 0x6b, 0xc3, 0x27, 0xe5, 0xf7, 0x23, 0x25, 0xf5, 0xec, 0x3a, 0x75, 0x1c, 0x97, 0x53,
	0x6e, 0xbb, 0x4e, 0x24, 0x29, 0xdf, 0x8f, 0x4e, 0x71, 0xd5, 0x0d, 0xaf, 0xea, 0xdc, 0x1e, 0xb0,
	0x80, 0xd3, 0x81, 0x17, 0x19, 0xec, 0x45, 0x06, 0xbe, 0x67, 0xd6, 0x03, 0x4e, 0x79, 0x18, 0x29,
	0xab, 0xbf, 0xad, 0x41, 0xf6, 0x84, 0x0d, 0x6d, 0x93, 0x91, 0x02, 0x64, 0x6c, 0x4b, 0x55, 0x2a,
	0xca, 0xfe, 0x86, 0x9e, 0xb1, 0x2d, 0x42, 0x60, 0xc5, 0xa1, 0x03, 0xa6, 0x66, 0x70, 0x07, 0x7f,
	0x93, 0x7b, 0x90, 0x75, 0xc2, 0x81, 0x61, 0x5b, 0xea, 0x72, 0x45, 0xd9, 0x5f, 0xd1, 0x57, 0x9d,
	0x70, 0xd0, 0xb4, 0xc8, 0x0b, 0xc8, 0x99, 0x3e, 0xb3, 0x98, 0xc3, 0x6d, 0xda, 0x0f, 0xd4, 0xcd,
	0xca, 0xf2, 0x7e, 0xee, 0xe0, 0x93, 0x5a, 0x4a, 0x20, 0x35, 0xe9, 0xac, 0x91, 0x58, 0xeb, 0x93,
	0x4a, 0xf2, 0x03, 0x6c, 0xf7, 0x69, 0xc0, 0x8d, 0x6b, 0x46, 0x7d, 0xde, 0x65, 0x94, 0x1b, 0x22,
	0x12, 0x75, 0xad, 0xa2, 0xec, 0xe7, 0x0e, 0xca, 0x31, 0x30, 0x0e, 0xb3, 0xd6, 0x89, 0xc3, 0xd4,
	0xb7, 0x84, 0xec, 0x2c, 0x56, 0x89, 0x7d, 0x72, 0x0c, 0x45, 0x64, 0xb1, 0x21, 0x73, 0x22, 0xce,
	0xfa, 0x42, 0x4e, 0x5e, 0x48, 0x34, 0xa1, 0x98, 0x62, 0x88, 0x9c, 0x31, 0xc9, 0xd8, 0xb9, 0x1b,
	0xa3, 0x2d, 0x14, 0xc8, 0x78, 0x09, 0x3b, 0xc8, 0x30, 0x5d, 0xe7, 0xca, 0xee, 0x19, 0xd4, 0xbc,
	0x91, 0xa0, 0xc2, 0xdd, 0x82, 0x6a, 0xa0, 0xec, 0xc8, 0xbc, 0x41, 0xd8, 0x05, 0xdc, 0x9b, 0x84,
	0x05, 0xcc, 0xb1, 0x24, 0x8d, 0x2c, 0xa4, 0x91, 0x31, 0xad, 0xcd, 0x1c, 0x0b, 0x71, 0x2a, 0xac,
	0x75, 0xfb, 0xae, 0x79, 0xc3, 0x2c, 0x75, 0xbb, 0xa2, 0xec, 0xaf, 0xeb, 0xf1, 0x72, 0x9c, 0x3d,
	0xdf, 0x77, 0x7d, 0xe9, 0x02, 0xee, 0x98, 0x3d, 0xa1, 0x40, 0xfa, 0x77, 0xb0, 0x35, 0xc1, 0x90,
	0x7d, 0xa7, 0xe6, 0x90, 0x42, 0x62, 0x8a, 0xef, 0x99, 0xb5, 0x36, 0x9e, 0xe8, 0xc5, 0x44, 0x2d,
	0x37, 0xc8, 0x21, 0x64, 0x65, 0x9c, 0x6a, 0x1e, 0x45, 0x0f, 0x6e, 0xeb, 0x28, 0x34, 0xd4, 0x23,
	0x01, 0x79, 0x06, 0xab, 0x58, 0x33, 0xb5, 0x84, 0xca, 0xca, 0x2d, 0x4a, 0xac, 0x94, 0x2e, 0xcd,
	0x89, 0x06, 0xeb, 0x03, 0xc6, 0xa9, 0x45, 0x39, 0x55, 0xb7, 0xb0, 0x8d, 0x1f, 0xde, 0x22, 0xad,
	0x5d, 0x44, 0xb6, 0x9a, 0xc3, 0xfd, 0x91, 0x9e, 0x48, 0xcb, 0xcf, 0x21, 0x3f, 0x75, 0x44, 0x4a,
	0xb0, 0x7c, 0xc3, 0x46, 0xd1, 0x74, 0x89, 0x9f, 0x64, 0x07, 0x56, 0x87, 0xb4, 0x1f, 0xc6, 0xf3,
	0x25, 0x17, 0xdf, 0x64, 0xbe, 0x56, 0xaa, 0x7f, 0x2f, 0x43, 0x41, 0xf2, 0x75, 0xd6, 0xb3, 0x03,
	0x21, 0xbf, 0xcb, 0x6c, 0xbe, 0x81, 0xb2, 0x6c, 0x75, 0xc7, 0xe5, 0xf6, 0x95, 0x6d, 0xe2, 0x0d,
	0x11, 0x35, 0x4a, 0xa0, 0x02, 0x06, 0xf3, 0x45, 0x6a, 0x30, 0xd8, 0xef, 0x97, 0x13, 0xaa, 0x28,
	0x99, 0x2a, 0x4b, 0x3f, 0x08, 0xc8, 0x35, 0xbc, 0x27, 0x47, 0x22, 0xc5, 0x57, 0x34, 0xad, 0xe9,
	0xae, 0x30, 0xd9, 0x29, 0xae, 0xf6, 0x82, 0xf4, 0x03, 0xf2, 0x3d, 0xe4, 0x06, 0x6f, 0x79, 0xdc,
	0xf0, 0xea, 0x0a, 0xb2, 0xef, 0xa7, 0xb2, 0x2f, 0xde, 0xf2, 0xa8, 0xbf, 0x75, 0x18, 0x24, 0xbf,
	0x05, 0xe1, 0x9a, 0x73, 0x2f, 0x26, 0x6c, 0xdc, 0x42, 0x38, 0xe3, 0xdc, 0x8b, 0x09, 0xd7, 0xc9,
	0x6f, 0xd2, 0x9c, 0xbe, 0xde, 0xd6, 0x31, 0x95, 0x9f, 0xa5, 0x12, 0xe2, 0x8a, 0xcd, 0xb9, 0xe0,
	0xaa, 0xaf, 0x01, 0xc6, 0x8f, 0x49, 0xce, 0x81, 0x60, 0x70, 0xcc, 0xa1, 0xdd, 0x3e, 0xb3, 0xe4,
	0x35, 0x83, 0x65, 0x2e, 0x1c, 0x7c, 0x38, 0x37, 0x46, 0xd9, 0xb0, 0x25, 0xa1, 0xd4, 0xa4, 0x10,
	0x77, 0x04, 0x7b, 0x1c, 0x80, 0x60, 0x63, 0xd8, 0x77, 0x67, 0x0b, 0x71, 0xc4, 0x16, 0xca, 0x29,
	0xb6, 0x06, 0x7b, 0x73, 0xba, 0x84, 0x3c, 0x82, 0x2d, 0x2f, 0xec, 0x06, 0x61, 0xd7, 0xe0, 0xae,
	0x67, 0x9b, 0x06, 0x36, 0xa6, 0x6c, 0xd5, 0xa2, 0x3c, 0xe8, 0x88, 0xfd, 0x4b, 0x3a, 0x40, 0xcc,
	0x9c, 0x0e, 0xf8, 0x5f, 0x98, 0x5f, 0x15, 0x20, 0xff, 0xcd, 0x34, 0xa1, 0xb0, 0xeb, 0x85, 0xdd,
	0xbe, 0x6d, 0x1a, 0x37, 0x6c, 0x64, 0x98, 0xcc, 0x8f, 0x9c, 0x48, 0xce, 0xbc, 0x51, 0x6e, 0xa1,
	0xe4, 0x25, 0x1b, 0x35, 0xc6, 0x82, 0xb3, 0x25, 0x7d, 0xc7, 0x4b, 0xd9, 0x3f, 0xde, 0x04, 0x18,
	0x97, 0xb3, 0xfa, 0x7b, 0x06, 0x76, 0x7f, 0x7e, 0xfa, 0xf8, 0x70, 0xc2, 0xe2, 0x84, 0x71, 0x6a,
	0xf7, 0x03, 0xb2, 0x0b, 0x59, 0x3b, 0x08, 0x42, 0xe6, 0x47, 0x31, 0x44, 0x2b, 0x71, 0xe3, 0x06,
	0x61, 0xf7, 0x0d, 0x33, 0x79, 0x34, 0xbc, 0xf1, 0x92, 0x1c, 0x02, 0x04, 0x9c, 0xfa, 0xd1, 0xab,
	0x6a, 0x79, 0xe1, 0x65, 0xbb, 0x81, 0xd6, 0x78, 0xd1, 0x3e, 0x87, 0x1c, 0x7b, 0xe7, 0xd9, 0xfe,
	0x48, 0x6a, 0x57, 0x16, 0x6a, 0x41, 0x9a, 0xa3, 0xb8, 0x0e, 0xdb, 0x81, 0xdd, 0x73, 0x28, 0x0f,
	0x7d, 0x66, 0xd0, 0x7e, 0xcf, 0xf5, 0x6d, 0x7e, 0x3d, 0x50, 0x57, 0xf1, 0xe9, 0x48, 0x72, 0x74,
	0x14, 0x9f, 0x90, 0x4f, 0xa1, 0x38, 0x91, 0x66, 0x3e, 0xf2, 0x98, 0x9a, 0x45, 0xe3, 0x7c, 0x92,
	0xb2, 0xce, 0xc8, 0x63, 0xd5, 0x3f, 0x15, 0xd8, 0x49, 0x4b, 0x2e, 0x79, 0x01, 0xd9, 0x2b, 0xd7,
	0x1f, 0x50, 0x1e, 0xb5, 0x63, 0xfd, 0xce, 0x75, 0x39, 0x45, 0x99, 0x1e, 0xc9, 0x49, 0x05, 0x72,
	0x93, 0x55, 0x96, 0x09, 0x9d, 0xdc, 0x22, 0x97, 0xb0, 0xf9, 0xee, 0xe9, 0xe3, 0x43, 0xc3, 0x92,
	0x65, 0x89, 0xd2, 0xfa, 0x79, 0xaa, 0xc3, 0xf4, 0x4a, 0xea, 0x39, 0x01, 0x88, 0x16, 0xd5, 0x3f,
	0x14, 0x28, 0xcd, 0x7e, 0xc2, 0x90, 0x26, 0xc0, 0x38, 0x21, 0xf8, 0x14, 0xb9, 0x83, 0xfd, 0x05,
	0x31, 0x25, 0xea, 0xb3, 0x25, 0x7d, 0x23, 0xc9, 0x1b, 0x69, 0x40, 0x11, 0x4b, 0x23, 0x2f, 0x54,
	0xac, 0x66, 0x76, 0x61, 0x35, 0x0b, 0x63, 0x89, 0xd8, 0x9c, 0x69, 0x52, 0x06, 0xdb, 0x29, 0x6e,
	0xc9, 0xb7, 0x33, 0x45, 0xf8, 0xf8, 0xf6, 0x07, 0x9e, 0xc9, 0x7c, 0xf4, 0x3e, 0xcb, 0x24, 0xef,
	0xb3, 0xea, 0x5f, 0x0a, 0x6c, 0x4e, 0xbe, 0x8a, 0x45, 0xa7, 0x0f, 0x99, 0x1f, 0xd8, 0xae, 0x83,
	0x1e, 0x96, 0xf5, 0x78, 0x49, 0x4e, 0x61, 0x0b, 0x9d, 0x18, 0xa1, 0x67, 0x25, 0xdf, 0x55, 0x99,
	0x85, 0x61, 0x16, 0x51, 0xf4, 0x0a, 0x35, 0xf1, 0xd7, 0x99, 0x85, 0x1e, 0xc7, 0x1f, 0x55, 0x8b,
	0xc7, 0x26, 0x2f, 0x25, 0xf1, 0x07, 0xd5, 0x7d, 0xc8, 0x75, 0x6d, 0x87, 0xfa, 0x23, 0x03, 0xdf,
	0xf9, 0x62, 0x74, 0x36, 0x75, 0x90, 0x5b, 0x27, 0x94, 0xd3, 0xea, 0x0d, 0xe4, 0x26, 0xbe, 0x13,
	0xc4, 0xa8, 0x4d, 0x3e, 0xb5, 0xb2, 0x78, 0xd4, 0xc2, 0xf1, 0x03, 0xcf, 0x38, 0xcb, 0xcc, 0x3a,
	0x7b, 0x74, 0x0e, 0x1b, 0xc9, 0x0d, 0x4f, 0xca, 0xb0, 0x7b, 0xf1, 0x53, 0xa7, 0x63, 0xb4, 0x3b,
	0x47, 0x1d, 0xcd, 0x78, 0x75, 0xd9, 0x6e, 0x69, 0x8d, 0xe6, 0x69, 0x53, 0x3b, 0x29, 0x2d, 0x91,
	0x12, 0x6c, 0xe2, 0x99, 0x76, 0x79, 0x74, 0x7c, 0xae, 0x9d, 0x94, 0x14, 0xb2, 0x05, 0x79, 0xdc,
	0x39, 0x69, 0xb6, 0xe5, 0x56, 0x46, 0xd0, 0x92, 0x3b, 0x5d, 0xd0, 0xce, 0x3a, 0x9d, 0xd6, 0x3c,
	0x1a, 0x9e, 0x4d, 0xd1, 0x70, 0x67, 0x82, 0xc6, 0xa0, 0x3c, 0x7f, 0x24, 0xc9, 0x97, 0xf0, 0x70,
	0x82, 0x69, 0xb4, 0x5e, 0x1d, 0x9f, 0x37, 0x1b, 0xc6, 0x4b, 0xed, 0x17, 0xa3, 0xa1, 0xe9, 0x9d,
	0xe6, 0x69, 0xb3, 0x21, 0xdc, 0x9e, 0xfe, 0xa8, 0x5f, 0x1c, 0x75, 0x4a, 0x4b, 0x44, 0x85, 0x1d,
	0x31, 0x6e, 0x53, 0x87, 0x2d, 0xed, 0xa2, 0xa4, 0x3c, 0x1a, 0x42, 0x71, 0xa6, 0xe9, 0xc8, 0x03,
	0xf8, 0x60, 0x0e, 0x3b, 0xe1, 0xe5, 0x60, 0x4d, 0x6f, 0x1f, 0x21, 0x62, 0x59, 0x84, 0x23, 0x16,
	0xe8, 0x00, 0xa1, 0x24, 0x0f, 0x1b, 0x5a, 0xfb, 0xe0, 0xe9, 0x33, 0x5c, 0x66, 0x08, 0x81, 0x82,
	0x5c, 0x26, 0x26, 0x2b, 0xc7, 0x57, 0xb0, 0x67, 0xba, 0x83, 0xb4, 0x21, 0x38, 0x2e, 0xe8, 0xf1,
	0x5f, 0xb4, 0x96, 0xa8, 0x6f, 0x4b, 0x79, 0xfd, 0x2c, 0x32, 0xeb, 0xb9, 0x7d, 0xea, 0xf4, 0x6a,
	0xae, 0xdf, 0xab, 0xf7, 0x98, 0x83, 0xd5, 0xaf, 0xcb, 0x23, 0xea, 0xd9, 0xc1, 0xd4, 0xff, 0xbc,
	0xe7, 0xb6, 0xcb, 0xff, 0x51, 0x94, 0x6e, 0x16, 0xad, 0xbe, 0xfa, 0x37, 0x00, 0x00, 0xff, 0xff,
	0x19, 0x85, 0xa9, 0x71, 0x0c, 0x0e, 0x00, 0x00,
}
