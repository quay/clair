// Code generated by go-bindata.
// sources:
// templates/analysis-template.html
// DO NOT EDIT!

package clair

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesAnalysisTemplateHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xdc\x5c\x7d\x6f\xe3\xb6\x19\xff\x3f\x9f\x82\x75\xae\x70\xae\x8b\xe5\xd8\xc9\xa5\xa9\xcf\xf6\xd0\xe5\x2e\xe8\x80\xac\x1d\x76\x5d\x81\xa1\x38\x14\xb4\x45\xcb\x44\x64\x51\x93\xe8\xbc\x2c\xf0\x77\xdf\x43\x52\x92\x25\x92\x92\x28\x27\xc1\x80\xe9\x9a\xb3\x23\x92\xbf\xe7\x8d\xcf\x1b\xa5\xeb\xf4\x9b\x4f\xbf\x5c\xff\xfa\xaf\xbf\x7f\x46\x6b\xbe\x09\xe7\x47\x53\xf1\x81\x42\x1c\x05\xb3\x1e\x89\x7a\xf3\x23\xb8\x43\xb0\x3f\x3f\x42\x70\x4d\x39\xe5\x21\x99\x5f\x87\x98\x26\xe8\x9a\x45\x3c\x61\x21\x4a\x48\xcc\x12\x8e\x26\xe8\xf9\xd9\xfb\xeb\x06\x07\xe4\x67\xbc\x21\xbb\xdd\x74\xa8\x26\x1f\xa9\x95\x21\x8d\xee\xd0\x3a\x21\xab\x59\x7f\xcd\x79\x9c\x4e\x86\xc3\x15\x00\xa4\x5e\xc0\x58\x10\x12\x1c\xd3\xd4\x5b\xb2\xcd\x70\x99\xa6\x7f\x5e\xe1\x0d\x0d\x9f\x66\xbf\xc4\x24\xfa\xd3\x17\x1c\xa5\x93\x8b\xb3\xb3\xd3\x4b\xf5\x43\x39\x0e\xe9\xf2\xf4\xa2\xf8\x76\x5e\xfe\xd6\x07\x6e\xc2\x59\x3f\xe5\x4f\x21\x49\xd7\x84\xf0\x3e\xe2\x4f\x31\x99\xf5\x39\x79\xe4\x02\xbb\x3f\x2f\xb1\x23\xe6\xf6\xf6\x73\x7b\x8a\xbf\x5e\xce\xdf\x06\x3f\x2e\xfd\xc8\x5b\x30\xc6\x53\x9e\xe0\x58\xfc\x22\x58\x14\x7c\x0f\xf0\x03\x49\xd9\x86\x0c\x2f\xbc\x4b\x6f\x24\x90\x2b\xb7\xbd\x0d\x85\xb9\x69\xda\xcb\xc5\x97\x54\x14\x6d\x71\x2d\x98\xff\x84\x9e\x8b\x5f\xc5\x25\x97\x2b\xc9\x27\xa8\x2f\x64\x47\x42\xf6\xfe\x29\x4a\xe1\x63\x90\x92\x84\xae\x3e\x56\x56\x6c\x70\x12\xd0\x68\x82\xce\xaa\xb7\x63\xec\xfb\x34\x0a\x8c\xfb\x0b\xbc\xbc\x0b\x12\xb6\x8d\xfc\x09\x0a\xd6\x2c\xe5\x0f\x6b\xca\x89\x75\xed\x60\xc1\x38\x67\x9b\x09\x1a\x93\xcd\x7e\xc2\xae\xf8\x36\xfc\x0e\xfd\xfa\x14\xb3\x00\x94\xb2\x7e\x42\xdf\x0d\x8b\x81\xe2\x8b\x07\x26\xf5\x6d\x12\xa6\xf4\x3f\x64\x82\x46\xde\x45\x2d\x72\x10\xb2\x05\x16\x5b\xf0\x89\x6d\xb9\x1d\x7c\x09\x48\x98\x46\x24\xd1\x28\xec\x45\x2f\x0b\xbf\xb3\x21\x00\x7f\xc9\x8a\x3e\x4e\xf0\x8a\x1b\x30\x02\x9e\x44\x7c\x82\x7a\xbd\xaa\x7a\x7c\x9a\xc6\xc0\xd7\x04\x2d\x42\xb6\xbc\xab\x8e\x49\x44\x18\x61\x7c\xdd\x4c\x3a\x61\x0f\x1a\xbd\xc2\x90\x68\x30\x3e\x8b\x1f\x5b\x97\x5b\x99\x7e\x0d\xde\x7e\x5f\x86\x38\x4d\xbf\x9b\xf5\x96\x2c\x1c\xf4\xbe\xd6\x6b\xb7\xca\xa6\xb8\x56\x21\xc3\xa0\xb1\x90\xac\xb8\xb6\xed\xd8\xa3\x30\xba\x5c\xb8\x60\x89\x4f\x12\xd8\x5d\x2d\x32\x0a\xf2\x97\x1a\xf5\x07\xea\xf3\xf5\x04\x7d\x38\xfb\xb6\x79\x6d\x8c\x23\x12\x6a\x6b\x61\x57\x15\xcc\x8f\x60\xe3\x95\x77\x95\xe2\x51\xf2\x95\x60\x9f\x6e\xd3\x09\xba\xd0\x85\x2b\xbb\x8e\xc5\x6b\xa4\x88\x6b\xec\x83\x65\x10\x28\x06\x8d\xe0\x67\x0c\x3f\xc7\x64\x2c\xfe\xb8\xf0\xbb\x1e\x5b\xf7\xc4\x80\xb3\xb8\xce\xc1\x0b\x27\xf5\x2a\x5e\x5a\x92\x27\x9f\x90\xb2\x90\xfa\x92\xab\x00\xbc\x26\x85\x51\xe6\xc0\xd3\x04\xf6\x02\x1f\x2c\xd7\x34\xd4\x1d\x39\xe3\x2d\x87\xb7\xba\x1a\xa8\xfc\x27\x08\x01\xb0\x4d\xad\x1e\x8c\xe3\x78\xb0\x56\xe3\xcf\xb5\xaa\x3e\x1e\x8f\x7e\xb8\xbc\x39\xd7\xf6\x32\x0b\x59\x62\x35\xc3\xde\x8d\x84\x11\xb2\x9f\x9a\xd8\x38\xba\x14\x36\x32\xc6\x2b\x96\x04\x6f\x14\xc6\x14\x33\x8f\xc7\x97\xe7\xe3\xf3\x2b\x0d\x8c\xa5\x94\x53\x06\x14\x21\x91\x60\x4e\xef\x49\xb3\x56\x4b\x32\xaf\x47\x75\x21\xe0\xa3\x19\x32\x1f\x08\x0d\xd6\xc2\xb7\xc4\x07\x49\xaa\x33\x44\x62\x1b\x40\x76\x8a\xd2\x15\x4b\xc0\x18\xdb\x38\x26\xc9\x12\xa7\x0e\xbc\x50\x91\xbf\xeb\x7c\xdc\xd4\x8d\xa4\x04\x89\x36\x00\x36\x97\x10\x1e\x75\x4e\x32\xc3\x58\x55\x55\xb6\x6a\x12\x2c\xf0\xc9\xf8\xc3\x87\x53\xb4\xff\xcb\xbb\x7a\xef\xb8\x83\x8f\x3f\x5f\x7f\xbe\xb9\x19\xb9\x4a\x67\xf8\x55\x29\x09\x19\x6e\xd3\xac\x6d\x1b\xa1\x74\xbb\x01\xcb\xe9\xa9\x1c\x8a\x0b\x02\x96\x56\x38\xde\x65\x6d\xa6\xcb\x2a\x27\xab\x83\x64\x63\xf5\x41\xa1\x3d\x53\xc8\xf4\x5c\x9b\x6a\xf0\x96\x33\xdd\x7f\x1e\x07\x59\x94\xfd\xe1\xd2\x30\x7f\x99\xf6\x79\x0d\x6d\x90\xe9\x8b\x28\x74\x10\x5b\x21\xbe\x26\x48\x71\x60\x95\x4f\x0d\x79\x11\xf3\x89\xbe\x05\x1b\xdc\x4a\x5c\x45\xa2\xa3\x91\x54\xb4\x25\xdf\xe5\xba\x1f\x1b\x91\x3c\x93\xcf\x1c\xc8\x15\x33\x76\xd3\xaa\x62\xdc\xf3\x99\x6e\xa2\x36\xee\x0f\x60\x4d\xcb\x4e\xe6\x84\xfa\xdc\x5b\x2e\xf9\x12\xfc\xf4\x51\xcf\x8a\xd5\x78\x97\xe7\x2d\xe9\xa1\x67\xa7\x48\xfd\xe7\x8d\x4b\xbe\xa9\x78\x29\x3b\xa4\xd5\x9d\x61\x49\xd9\xec\x2d\x7a\xf4\x3e\x91\x15\xd4\x5c\x23\x9b\x3e\xcb\x22\x2c\x42\x5c\xb6\x74\x1b\xea\x75\x02\x96\x58\x42\x29\xd9\x02\x7b\x4c\xae\x46\x64\xd4\x12\x30\xcb\xc0\x3f\x81\x09\x5b\x41\x3f\xff\x30\xfa\x7c\x79\xee\x0e\xfa\x37\x02\xe6\xdd\xb4\xc2\xde\xdc\xfc\xf8\xfd\xf8\xd2\x1d\xf6\x16\xaa\xcd\x36\xcc\xab\xbf\x5c\x9f\x5f\xfc\xe8\x8e\xf9\x33\x09\x20\x3a\xd2\x45\x68\xf5\x80\x0a\xf4\xf9\xf7\x17\xdf\x5f\xdc\xb8\x43\xff\x33\xba\x8b\xd8\x43\xf4\xda\xb8\x50\xd2\xb0\x78\x1b\xd7\x95\xcc\x11\x8b\x88\xd5\x19\xa1\xa5\x34\x4a\x88\xc2\xc1\xf1\x02\xbc\x60\x6b\x16\x83\x2a\x65\x8d\xce\xca\x95\xaa\xb8\xb4\xb2\xc9\xcc\xb0\xd9\x04\xe1\xc7\x13\x34\x18\x7d\x30\x26\xa8\x91\xf1\x2b\x95\xa7\x0d\x6e\x2e\x05\x2d\x6a\x25\x4b\x99\xd4\x5c\x2f\xcb\xc8\xa2\x07\x8a\xbc\x1a\xd6\x8b\x6f\x59\x57\xec\x83\x90\xf8\x23\xeb\x99\x18\x27\x50\x65\x74\x35\x71\x73\x43\xd7\xef\x77\x33\xa6\xcc\x76\xa6\x25\x95\x1d\x3e\xd4\x18\x38\xb7\x9f\xa1\xb6\xa6\x16\x2d\xdb\x70\x67\xf6\x6c\xa1\xb7\xf2\x4a\xff\xd9\x9a\x91\x34\xaa\xac\x77\xeb\x6d\x55\x2e\x9b\xcb\xfa\xad\xfb\x6e\x05\x91\xa7\x18\x99\x4d\x3b\x1b\x66\x41\xa0\x42\xd5\x93\xfd\xff\xb9\x65\xc4\xbe\x97\x7f\xb5\x5b\xc6\xf0\xc6\xff\x89\x95\xd0\x1c\x74\x71\xaf\x19\x89\xdd\x93\x04\x6a\x0c\x70\xcf\x35\xf5\x7d\x12\x59\xfa\x82\xfd\x14\x12\x86\x34\x4e\x69\xea\x4c\x79\xb2\x16\x8b\x6d\x11\x9f\xc5\x78\x49\x39\x58\xc5\xbb\xea\x8c\xd6\x18\xef\x2d\x56\x16\xc5\x6f\x6e\xd3\xd1\x95\x61\xab\xcc\x48\x3e\xdd\x54\xeb\xa8\x4a\xed\xbb\xc0\x49\x6a\xaf\x76\x61\x64\xb0\x08\xea\xd8\xa9\x2f\x64\x8b\x9a\xd0\x60\x28\xe7\xf5\xb2\x3e\x3f\xb9\x75\xa5\x92\x35\xdc\xe5\x34\xc9\xc9\x35\x0d\xbf\x30\xce\x0a\xc4\xa5\x1c\xb2\xe1\xa0\xd2\x28\xa3\x14\x58\xb5\x20\x6e\x2b\xd9\x33\x11\x8b\x32\xf3\x45\x15\x66\x0e\x56\x54\x97\x2f\x2c\x2c\x73\x3c\x59\x54\xbe\xb0\x9e\xcc\xb1\xb2\x5a\xf2\x85\x65\x64\x8e\x76\x6b\x1c\x58\x76\xae\x1e\x73\xa8\x52\xe5\xf8\xc2\xe2\x2e\x47\xcc\x0b\xc6\x83\xe0\xc0\x67\xef\xb7\x61\x44\x12\xbc\xa0\x21\x98\x93\xd4\xb8\x6f\x43\x33\x2e\xa2\x05\xc4\xf7\x2e\xdd\xb4\xf5\x54\x57\x51\xf0\x34\x76\x4e\xcd\x19\x2b\x82\xf9\x36\x01\x4e\xe7\x68\xab\x6f\xbe\x0e\x4f\x04\x9a\x98\x68\x22\x11\xd2\x94\xe7\x19\xa6\x5a\x36\xdb\x10\x33\x24\xdd\x3a\x2f\x3a\xdc\xc9\x30\xeb\x8f\x27\xab\x79\xf5\xf8\xfa\xe6\xd3\xd5\xa7\x6b\x27\xcc\x3f\xfe\x90\xcf\xac\xea\xce\xc4\x46\xf6\x93\x9c\x3d\x8c\xbe\x99\xac\x38\x59\x15\x32\x16\x07\x43\xe8\x1b\xba\x11\x3a\xc7\x6d\x85\x6e\x19\x59\x3f\x6e\x32\xce\x83\xaf\xf4\x83\xad\x7c\x46\x92\x9d\x3d\x78\x35\xcf\x75\xea\x25\xd9\xb7\xe8\x11\xde\x98\x45\x9c\xd4\xb4\x43\xf0\x34\x60\xf7\x3d\x7a\x3d\xae\x53\x18\x35\x90\x55\x93\xde\x80\xea\x12\x50\x0d\xd4\xbc\x4b\x6f\xc0\x75\x09\xad\x06\xae\x6c\xd3\x1b\x40\x5d\x82\xac\x01\x5a\xee\xd3\x1b\xb0\x5d\xc2\xad\x81\x5d\x34\xea\x07\x01\x43\xe0\x85\xea\x82\xd4\x95\x4b\x72\x2c\xfb\xb0\xfb\xe4\x72\x9b\xa4\x82\x46\xcc\xa8\x79\x12\x6d\x77\x58\x71\xd5\x47\x1e\x3d\x4a\x34\xc9\x21\x2e\x4b\xa8\xb5\xe9\xcd\x22\x49\x56\xa1\x36\xa5\x7a\x87\x28\x28\x11\xbd\x65\xc8\x52\xe2\x97\x22\xb6\xd3\x01\x47\xc3\x49\xf6\x40\x54\xf3\x75\x28\xab\x90\x18\x27\x16\xfb\x24\x67\xd6\xa8\xcd\x87\xcd\x95\xc3\x10\xc3\x52\x95\xe3\xe6\xb6\x68\x55\x61\xde\x76\xa6\xdc\xf6\xec\x42\x48\x06\x4c\x74\xa5\xd2\xb1\xa7\xed\x70\x72\x6d\x76\x8b\xa5\x66\xbf\xb1\x1a\x36\x7a\xdf\xd6\x27\x6a\x99\xaa\x13\x1b\x65\x37\x3d\xe4\xd9\xc1\xae\x8f\x8e\x05\xb6\x05\x3e\xcf\x12\xed\xf8\x4e\xb9\xc2\x42\x41\x64\x0b\x07\x74\x97\x9c\x61\x41\x57\x59\xc3\x01\xdf\x25\x77\x58\xf0\x21\x7b\x38\x80\xbb\xe4\x10\x0b\xf8\x3e\x8b\x38\xd0\x70\xc9\x25\x16\x1a\x59\x36\x79\x25\x02\x79\xe3\x3b\xb0\x3d\x01\x7b\x93\x68\xd6\xea\x63\x82\xd8\xc0\xa7\x09\x59\x66\xbd\x39\x7b\x18\x24\x04\xf2\x40\x6a\x1c\xd6\x56\xbc\xf9\x5c\xe7\xa2\xfe\x2c\xc6\x41\x13\x87\x84\xc6\x3c\x22\x5d\x35\x9d\x3a\x1b\x32\xbb\x32\xf3\x3a\x3d\xb9\x15\xf9\xb5\x1a\x74\x2b\xf8\x6b\x74\xeb\x56\xe0\xd7\x69\xdd\xad\xd0\xaf\xd0\xc7\x5b\x71\x5f\xaf\xa9\xb7\xc2\x1f\xdc\xe1\x4f\x87\xd9\x5b\x77\xd3\xa1\x7a\x85\xf1\x68\x2a\xde\xbb\xcb\xde\x00\x14\xc7\x9c\xf2\x75\x27\xf1\xb6\x53\xf6\x3a\x59\x6f\xff\x86\xde\x34\x7b\x53\x23\x9b\xb2\x7f\x77\xa3\x34\x47\xcd\x1b\x59\xdf\x87\x04\x9a\xa3\x12\xda\x50\x2d\xce\x5e\x07\xd4\x19\xd8\xbf\xaf\x90\xbf\x97\x66\x50\x19\xcf\xe5\xbb\x95\xe6\x5b\x96\x30\x52\x99\xfa\xfc\x8c\xde\x51\x8c\x26\x33\xe4\xed\x76\x47\x55\x94\x54\x85\x9f\x9c\x6c\x16\x88\x35\x5a\x39\x73\xe6\x5d\x05\xff\x40\xf9\x1a\xbd\xd3\x1a\x82\x6b\xb0\x04\x17\x44\x71\x18\xfe\xa6\xf5\x0a\xc0\xce\x6e\x67\x05\x9b\xc6\xf3\x69\x1a\xe3\x82\x21\xf1\xd2\x60\x0f\x6e\x81\x26\xa2\x60\xfe\x2b\xe3\xe0\xbd\x42\x62\x2b\x35\x4f\x8e\xef\x76\xfa\x11\x8e\x30\xbb\x5c\x0f\x5f\x00\x1b\x3e\x62\xbb\x28\xf5\x03\x25\xd3\x94\x93\x95\x45\x51\x7b\xb5\xd0\x15\x0a\x38\x3a\xb1\xb3\xaa\xd4\xd3\xcb\xb6\x72\xef\x3d\x3a\xab\xd1\x88\x4e\x5e\x06\xec\x7c\xd9\x3c\x77\x85\x09\xca\x75\x54\xa7\x1b\x8d\xa0\xd8\x28\x85\x56\x6a\x6d\xab\x04\x21\x91\x0f\x4a\x75\x13\x68\xef\xfa\x5d\x65\x2a\xad\x9c\x97\x02\x88\xb3\x64\xa5\xf5\x6f\x25\x1c\xc4\xcb\xae\x52\x89\x25\x73\x11\x67\x9d\xe5\x10\x2b\xde\x4a\x00\x95\x4b\xba\xca\x90\xad\x9a\x67\x99\xc8\x59\x92\x6c\xdd\x5b\x09\x23\x32\x6e\x57\x51\xe4\x9a\xb9\xcc\xd5\xce\x62\xc8\x35\x6f\x25\x44\x5e\x93\x74\x15\xa4\x58\x37\x2f\xaa\x1a\x67\x81\x8a\xb5\x6f\x25\x54\x56\xc2\x75\x95\x29\x5f\x36\xcf\x4b\x40\x67\x89\xf2\x95\x9d\x05\xaa\x49\x03\xb5\x4b\xcb\x3c\x57\x6b\x93\x86\x54\x50\x2b\x28\x92\xe5\xc8\xac\x97\xb5\x18\x75\x42\xfe\x23\x23\x64\x08\xfb\x6d\xaf\x4d\xcc\xfa\x7d\x73\x18\xed\xd2\xd6\x39\x80\xb8\xf4\xa4\xc3\x08\x67\x4e\x78\x00\xd1\x2c\x0a\x1d\x46\xb6\x08\x61\x07\x10\x16\x81\xfc\x30\xaa\x2a\x05\x1c\x40\xb2\x94\x03\x0f\xa3\x5c\x49\xa2\x07\x30\x90\x97\x17\x87\x51\xdf\x17\x27\xcd\xa4\x1b\x86\xea\xfc\xda\xb2\x04\x42\x85\xaa\x7e\xab\xb7\x8f\xea\x04\xac\x73\xf3\xe7\xe7\x04\x47\x01\x41\xef\xee\x4e\xdf\xdd\x8b\x8a\x57\x3f\x1a\xb7\x97\xbb\xc5\xb2\x7b\x1b\xbb\xb8\xa2\x56\x28\xf1\xbf\x88\xb3\x01\xca\x9f\x76\xbb\xfc\x5f\x25\x1d\x43\x61\xef\x89\xa2\x1f\xc1\xbd\xf6\x70\xe5\x33\xde\xac\xd4\xd2\x5c\xf9\xae\x44\x4b\x44\x9b\xef\x63\xb3\x97\xb7\x1e\x6e\xb1\x57\xae\xae\x88\xe4\xb8\xe0\x46\x1d\x6a\x37\xce\xaf\x19\x9a\x0e\xb1\xcd\x72\xf6\xcd\x62\xbb\xaf\xe1\x66\xbf\xee\x7f\xd7\x3a\x29\xd5\xf3\xe9\x4d\x9b\x9d\xb5\xb2\xe2\xc5\xbf\xb3\x70\x30\xa6\x7a\x56\xd2\x96\x73\xa8\x3f\xeb\x81\xda\x6e\x71\xca\x6f\xe5\xd3\x01\x65\xa7\x5e\x05\xa5\x01\x44\x02\xad\xcf\x2b\xd3\xb3\x67\x16\x3d\xe4\x63\x8e\x07\x9c\x05\x41\x48\x06\x72\xc4\x4e\x6b\x6e\xb9\x09\x3d\xea\x79\x0b\xd5\x92\xac\xf9\xa3\x8c\x16\x46\xe5\xb2\x6d\xd8\x3e\x49\x5c\xe0\x3a\xca\xfb\x52\xb0\x12\xf1\xdd\x1b\x54\x83\x62\x48\x35\x3e\x1d\xd8\x2c\x16\x9b\x52\xe6\xea\x75\x07\x41\xa8\x54\x25\x15\x01\xa1\xf0\x45\x24\xfb\x69\x39\xf4\x1b\x6c\x19\xb1\x45\xe5\xa8\xb8\x89\x06\xa8\xd2\x6d\xaf\x30\x5a\xe1\x01\x79\x84\x5f\x37\x58\xec\xe6\x01\x4f\x28\xa8\x49\x98\x1b\xc3\xb7\x81\x3a\x61\x9c\xf5\x78\xb2\x25\xbd\xbc\x9d\x76\x17\xb7\xd9\xcb\xf5\xab\xb0\x91\xa7\x99\xc7\xd1\x34\x92\xe4\x36\xcc\x85\xd3\xa2\x72\x37\x0d\x97\xed\xac\x3d\x79\x07\xc5\xe6\x81\xac\x3e\x10\x37\x42\x63\x2b\x72\xe1\x68\xe2\x79\xaa\xf0\xad\x52\xb0\xb7\x46\xb3\x56\x3a\x6a\x47\x14\x89\x05\xc0\x7a\xd6\x2d\xd3\x1d\x59\xc5\x67\xf1\x4e\x40\xba\x4c\x68\xcc\xf3\x5d\xd6\xc9\xde\x05\x1a\xce\x12\x9c\x40\xbc\x15\xff\x2c\x57\x84\x2c\x8e\x93\x80\xf0\x59\x6f\x11\xe2\xe8\x0e\x5a\x6a\xb8\xdf\x59\x0b\xd3\x61\x48\xbb\x6c\x57\xd7\x68\xe2\x8e\xdb\xd4\x76\x1c\x3a\xb7\x9d\xcf\xb6\xf4\x7a\x40\x36\xb5\xdf\x5e\x24\x68\xa8\x17\x59\xc5\xcc\xca\xd7\x4a\xe9\x55\x4e\xa6\x53\xb5\x83\xf6\x28\x27\xab\x6d\x24\xe7\x9e\xbc\x37\x1f\xab\xa6\x1c\xa9\x14\x94\xa4\x68\x86\x7c\xb6\xdc\x6e\x08\xd4\x95\xff\xde\x92\xe4\xe9\x0b\x09\x81\x08\x4b\x7e\x0c\xc3\x93\xfe\xef\x46\xba\xfa\xda\x7f\xaf\x3f\xdc\x8f\x52\x16\x12\x2f\x64\xc1\x49\x0e\x0a\x53\x2a\x73\x56\x2c\x41\x27\xf7\x38\x41\x14\xc8\xe5\x93\xbc\x90\x44\x01\x5f\x43\x34\x1d\x7d\x84\x81\xf9\x0c\x9d\xc1\xe7\x60\xa0\xf3\x2b\xae\x7c\xcd\xef\xf4\xab\xc7\xa2\x65\x48\x97\x77\x80\x54\x88\x48\x6c\x6b\xc4\x45\x3c\xe5\x00\x9e\x7a\xcd\xf7\x67\x71\x0e\x2e\x1d\xf9\x96\xa6\xdc\x53\xa8\x27\x7d\xf5\xf4\x5f\x17\x4c\x5c\xbb\xea\xad\xfd\xae\xda\xbd\x3f\xc9\xa6\x83\x51\x32\xd5\x4f\x87\xea\x58\x5c\x9c\x93\x8b\xff\x07\xc0\x7f\x03\x00\x00\xff\xff\xb3\xfc\x2e\xd8\x13\x40\x00\x00")

func templatesAnalysisTemplateHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesAnalysisTemplateHtml,
		"templates/analysis-template.html",
	)
}

func templatesAnalysisTemplateHtml() (*asset, error) {
	bytes, err := templatesAnalysisTemplateHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/analysis-template.html", size: 16403, mode: os.FileMode(420), modTime: time.Unix(1466557241, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/analysis-template.html": templatesAnalysisTemplateHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"analysis-template.html": &bintree{templatesAnalysisTemplateHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

